#!/usr/bin/python3

import argparse
import pymongo
import os
import requests


parser = argparse.ArgumentParser(description='Extrai possiveis dominios que\
        sao passiveis de takeover do banco de dados')

def getArgs():
    parser.add_argument('-d', dest='domain', 
            help='Especificar dominio a ser avaliado', required=False)
    parser.add_argument('-e', dest='regExpr', required=True,
            help='Expressao regular que define quais subdominios\
                    a serem validados')
    parser.add_argument('-b', dest='dbase', 
            help='Especificar o nome do banco de dados', required=False)
    parser.add_argument('-c', dest='collection',
            help='Especificar o nome da collection', required=False)

    return parser.parse_args()


def selectInfo(database, collection, findDict):
    try:
        url = os.getenv("MONGO_URI").replace('<password>', 
                os.getenv("MONGO_PASSWORD"))
        client = pymongo.MongoClient(url)
        dName = database or 'DNS_INFO'
        colName = collection or 'CNAMES'
        dbase = client[dName]
        return dbase[colName].find(findDict)
    except Exception as e:
        print("Erro ao buscar dados")
        print(str(e))
        exit(-1)


def fakeReturn():
    d = {
            "Domain":"starbucks.com",
            "Subdomain":"ws1.starbucks.com",
            "AliasCNAME":"sbloadbalancer-624515223.us-east-1.elb.amazonaws.com."
        }
    return d

def genSelectDict(args):
    mainDict = dict()
    if args.domain:
        mainDict['Domain'] = args.domain
    mainDict['AliasCNAME'] = { '$regex' : args.regExpr }
    return mainDict


def validateDomains(findData):
    for result in findData:
        # urlToReq = "https://" + result['AliasCNAME'].replace(".$","")
        try:
            # resp = requests.get(urlToReq)
            # print(result['Domain'], '->', result['Subdomain'], '->',
            #        result['AliasCNAME'], '->', resp.status_code)
            print(result['AliasCNAME'] + "|" + result['Subdomain'])

        except Exception as e:
            #print(str(e))
            print(result['Domain'], '->', result['Subdomain'], '->',
                   result['AliasCNAME'], '-> Timeout')


# MAIN
def main():
    args = getArgs()

    selDict = genSelectDict(args)

    findData = selectInfo(args.dbase, args.collection, selDict)

    validateDomains(findData)


if __name__ == '__main__':
    main()


